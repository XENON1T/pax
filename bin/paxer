#!/usr/bin/env python
""" Processor for Analyzing XENON - command line interface

This is the main entry point for running pax.  It allow you to configure a few simple options operations
for running with pax  can configure viathe command line.
Typically, you'll specify a configuration via the --config command line argument.
For more control, you want to make your own configuration file and load it with --config_path your_config.ini
"""
import argparse
import os
import sys
from collections import OrderedDict

# Hack to ensure correct matplotlib backend is chosen
# Without this, pax's plotting does not work when using a system without a graphical display
# Stolen from http://stackoverflow.com/questions/8257385/automatic-detection-of-display-availability-with-matplotlib
import matplotlib
if os.name != 'nt' and not os.environ.get('DISPLAY'):
    matplotlib.use('Agg')

# These imports must be after matplotlib.use, otherwise the backend is already chosen
# (so which of them is actually importing matplotlib.pyplot??)
import pax    # flake8: noqa
from pax import core, utils, formats, parallel    # flake8: noqa

def main():
    input_plugin_aliases, output_plugin_aliases = get_aliases()
    parser = get_argsparser(input_plugin_aliases, output_plugin_aliases)
    args = parser.parse_args()

    if args.version:
        print(pax.__version__)
        exit()

    if not (args.config or args.config_path):
        print("You did not specify any configuration!")
        parser.print_usage()
        exit()

    override_dict = {'pax': {}}

    # Feed certain command line args into pax configuration format
    for argname, configname in (('input',       'input_name'),
                                ('output',      'output_name'),
                                ('log',         'logging_level'),
                                ('stop_after',  'stop_after'),
                                ('event',       'events_to_process'),
                                ('event_numbers_file', 'event_numbers_file'),):
        value = getattr(args, argname)
        if value is not None:
            override_dict['pax'][configname] = value
    if args.ignore_rundb:
        override_dict['pax']['look_for_config_in_runs_db'] = False

    # Process input type options
    if args.input_type is not None:
        override_dict['pax']['input'] = []
        for pa in wraplist(args.input_type):
            bla = input_plugin_aliases[pa]
            decoder = None
            if isinstance(bla, tuple):
                if isinstance(bla[1], dict):
                    # We have a plugin name, extra options tuple
                    plugin_name, override_dict[plugin_name] = bla
                else:
                    # We have two plugins, the second is the decoder
                    plugin_name, decoder = bla
            else:
                plugin_name = bla
            override_dict['pax']['input'].append(plugin_name)
            override_dict['pax']['decoder_plugin'] = decoder

    # Process output type options. Code is almost the same... sorry!
    if args.output_type is not None:
        override_dict['pax']['output'] = []
        for pa in wraplist(args.output_type):
            bla = output_plugin_aliases[pa]
            encoder = None
            if isinstance(bla, tuple):
                if isinstance(bla[1], dict):
                    # We have a plugin name, extra options tuple
                    plugin_name, override_dict[plugin_name] = bla
                else:
                    # We have two plugins, the first is the encoder
                    encoder, plugin_name = bla
            else:
                plugin_name = bla
            override_dict['pax']['encoder_plugin'] = encoder
            override_dict['pax']['output'].append(plugin_name)

    # Overrides for plotting
    if args.plot_to_dir or args.plot or args.plot_interactive or args.rootplot or args.rootplot_full:
        override_dict['pax']['pre_output'] = []    # Avoid dumping the stuff we want to plot!
        override_dict['pax']['encoder_plugin'] = None
        if args.plot:
            override_dict['pax']['output_name'] = 'SCREEN'
            override_dict['pax']['output'] = 'Plotting.PlotEventSummary'
        if args.rootplot:
            override_dict['pax']['output_name'] = args.rootplot
            override_dict['pax']['output'] = 'ROOTPlot.ROOTWaveformDisplay'
            override_dict['pax'] = {"rootplot_full": False}
        if args.rootplot_full:
            override_dict['pax']['output_name'] = args.rootplot_full
            override_dict['pax']['output'] = 'ROOTPlot.ROOTWaveformDisplay'
            override_dict['ROOTPlot'] = {'rootplot_full': True }
        if args.plot_to_dir:
            override_dict['pax']['output'] = 'Plotting.PlotEventSummary'
            override_dict['pax']['output_name'] = args.plot_to_dir
        if args.plot_interactive:
            if not args.output:
                override_dict['pax']['output_name'] = 'SCREEN'
            override_dict['pax']['output'] = 'Plotting.PeakViewer'

    # Format the config string
    config_str = args.config_string
    config_str = config_str.replace(']', ']\n')
    config_str = config_str.replace(';', '\n')


    config_kwargs = dict(config_names=args.config,
                         config_paths=args.config_path,
                         config_string=config_str,
                         config_dict=override_dict)
    parallel.maybe_multiprocess(args, **config_kwargs)


def get_argsparser(input_plugin_aliases, output_plugin_aliases):
    """Process command line arguments"""
    parser = argparse.ArgumentParser(description="Processor for XENON data",
                                     epilog="""For more information, please see the pax documentation at
                                               http://xenon1t.github.io/pax/ or the pax development site at
                                               https://github.com/XENON1T/pax.""")

    # Basics
    parser.add_argument('--version',  action='store_true',
                        help="Print current pax version, then exit")
    parser.add_argument('--log', default=None,
                        help="Set log level, e.g. 'debug'")

    # Multiprocessing
    mp_group = parser.add_argument_group(title='Multiprocessing')
    mp_group.add_argument('--cpus', default=1, type=int,
                          help="Number of CPUs to use. If >1, will activate multiprocessing and use 2 + cpus cores.")
    mp_group.add_argument('--remote',  action='store_true',
                          help="Multiprocess using remote workers")
    parallel.add_rabbit_command_line_args(mp_group)

    # Input and output control
    io_group = parser.add_argument_group(title='Input/output')
    io_group.add_argument('--input', default=None,
                          help="File, database or directory to read events from.",)
    io_group.add_argument('--output', default=None,
                          help="File, database or directory to write events to. "
                               "If omitted, will try to construct one from input name or timestamp. "
                               "For plotting to screen, use SCREEN.")

    output_type_options = list(reversed(sorted(output_plugin_aliases.keys())))
    io_group.add_argument('--output_type',
                          nargs='+', choices=output_type_options,
                          help='Output format/plugin(s) to use. '
                               'Should be a space-separated list; allowed values are: ' +
                               ', '.join(output_type_options) + '.\n' +
                               'Use with --config reduce_raw_data if you want to write raw data!',
                          metavar='OUTPUT_TYPE',
                          )
    input_type_options = list(reversed(sorted(input_plugin_aliases.keys())))
    io_group.add_argument('--input_type',
                          choices=input_type_options,
                          help='Input format/plugin to use. '
                               'Allowed values are: ' +
                               ', '.join(input_type_options) + '.\n' +
                               'Use with --config Reprocess if you want to read processed data!',
                          metavar='INPUT_TYPE',)

    # Configuration control
    # Pass in a name to use a pre-cooked config from config:
    config_group = parser.add_argument_group(title='Configuration')
    config_options = utils.get_named_configuration_options()
    config_group.add_argument('--config',
                              choices=config_options,
                              default=[],
                              nargs='+',
                              metavar='CONFIG',
                              help="Name(s) of the pax configuration(s) to use. "
                                   "Should be a space-separated list; allowed-values are: " +
                                   ', '.join(config_options))
    # ... or a path to your own config file:
    config_group.add_argument('--config_path',
                              default=[],
                              nargs='+',
                              help="Path(s) of the configuration file(s) to use.")
    config_group.add_argument('--config_string', default='',
                              help="String specifying additional configuration options. Semicolons become newlines.\n"
                                   "For example: '[WaveformSimulator]event_repetitions=2;electron_lifetime=50*us'")
    config_group.add_argument('--ignore_rundb', action='store_true',
                              help="Do not try to look for run-specific config overrides in runs database.")

    # Control events to process
    event_group = parser.add_argument_group(title='Event specification')
    event_group.add_argument('--event',
                             type=int,
                             nargs='+',
                             help="Process particular event number(s).")
    event_group.add_argument('--event_numbers_file',
                             type=str,
                             help="Name of file containing newline-separated event number(s) to process.")
    event_group.add_argument('--stop_after',
                             type=int,
                             help="Stop after STOP_AFTER events have been processed.")

    # Plotting override
    plotting_control_group = parser.add_mutually_exclusive_group()
    plotting_control_group.add_argument('--plot',
                                        action='store_const',
                                        const=True,
                                        help='Plot summed waveforms on screen. '
                                             'Equivalent to --output_type plot --output SCREEN.')
    plotting_control_group.add_argument('--rootplot',
                                        help='Save waveform in ROOT format. Give argument as the ouput folder.')
    plotting_control_group.add_argument('--rootplot_full',
                                         help='Save waveform to ROOT with all pulses')
    plotting_control_group.add_argument('--plot_interactive',
                                        action='store_const',
                                        const=True,
                                        help='Plot interactive peak browser on screen. '
                                             'Equivalent to --output_type plot_interactive --output SCREEN.')
    plotting_control_group.add_argument('--plot_to_dir',
                                        help='Save summed waveform plots in directory. '
                                             'Equivalent to --output_type plot --output your_directory.')

    return parser


def get_aliases():
    # Make the output plugin aliases
    # Don't know yet if we want to display these ordered lexically or conceptually in --help:
    # work with an ordereddict to store the conceptual order in case we change our minds
    output_plugin_aliases = OrderedDict([
        ('none',  'Dummy.DummyOutput'),
        ('plot',  'Plotting.PlotEventSummary'),
        ('plot_interactive',  'Plotting.PeakViewer'),
    ])
    # Add output aliases from TableWriter formats
    output_plugin_aliases.update([(fc, ('Table.TableWriter', {'output_format': fc}))
                                  for fc in formats.flat_data_formats.keys()])
    output_plugin_aliases.update([
        ('root',         ('ROOTClass.EncodeROOTClass', 'ROOTClass.WriteROOTClass')),

        # Zipped formats -- allow arbitrary event numbering
        ('zpickle', ('Pickle.EncodeZPickle', 'Zip.WriteZipped')),
        ('zbson',   ('BSON.EncodeZBSON', 'Zip.WriteZipped')),
        ('zmp',   ('MessagePack.EncodeMessagePack', 'Zip.WriteZipped')),

        # Non-zipped formats
        ('json',  'BSON.WriteJSON'),
        ('xed',   'XED.WriteXED'),
        ('strax',  'strax.WriteStrax'),

        # Formats that don't have a plugin to read data back
        ('raw_dump',     'RawWaveformDump.DumpSumWaveformToBinary'),
        ('mongo',        'Mongo.MongoDBWriteTriggered'),
    ])

    input_plugin_aliases = OrderedDict([
        ('none',     'Dummy.DummyInput'),
        ('garbage',  'Dummy.GarbageInput'),
        ('xed',      ('XED.ReadXED', 'XED.DecodeXED')),

        # Zipped formats
        ('zbson',   ('Zip.ReadZipped', 'BSON.DecodeZBSON')),
        ('zpickle', ('Zip.ReadZipped', 'Pickle.DecodeZPickle')),
        ('zmp',    ('Zip.ReadZipped', 'MessagePack.DecodeMessagePack')),

        # Nonzipped formats
        ('json',    'BSON.ReadJSON'),
    ])
    input_plugin_aliases.update([(fc, ('Table.TableReader', {'format': fc}))
                                 for fc in formats.flat_data_formats.keys()])
    input_plugin_aliases.update([
        # Simulator input formats shouldn't be here: if you load simulated events you want a different config as well,
        # so you still want to use the Simulator ini file.

        # ROOT
        ('root',     'ROOTClass.ReadROOTClass'),

        # Mongo
        ('mongo_untriggered', 'MongoDBReadUntriggered'),
        ('mongo_untriggered', 'MongoDBReadUntriggered'),
    ])

    return input_plugin_aliases, output_plugin_aliases


def wraplist(x):
    """Returns [x] if x is a string or not iterable, returns x otherwise"""
    if isinstance(x, str):
        return [x]
    try:
        x[0]
    except TypeError:
        return [x]
    return x

if __name__ == "__main__":
    main()
